const express = require("express");
const authMiddleware = require("../middleware/authMiddleware");
const { exec } = require("child_process");
const db = require("../config/db");
const { refreshAccessToken } = require("../middleware/refreshToken");

const router = express.Router();

/**
 * @swagger
 * /api/gee/data:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ GEE
 *     tags: [GEE]
 *     security:
 *       - BearerAuth: []
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ.
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
 */
router.get("/data", authMiddleware, async (req, res) => {
  try {
    const userId = req.user.id;
    const data = await db.any("SELECT * FROM gee_data WHERE user_id = $1", [userId]);
    res.json(data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö GEE:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö GEE" });
  }
});

/**
 * @swagger
 * /api/gee/data:
 *   post:
 *     summary: –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ GEE (NDVI, –≤–æ–¥–∞, —Å–Ω–µ–∂–Ω—ã–π –ø–æ–∫—Ä–æ–≤)
 *     tags: [GEE]
 *     security:
 *       - BearerAuth: []
 *     description: –í—ã–∑—ã–≤–∞–µ—Ç Google Earth Engine –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               region:
 *                 type: object
 *                 example: { "coordinates": [[59, 37], [72, 37], [72, 45], [59, 45], [59, 37]] }
 *               startDate:
 *                 type: string
 *                 example: "2020-01-01"
 *               endDate:
 *                 type: string
 *                 example: "2024-01-01"
 *               type:
 *                 type: string
 *                 example: "NDVI"
 *     responses:
 *       200:
 *         description: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
 */
router.post("/data", authMiddleware, async (req, res) => {
  try {
    const { region, startDate, endDate, type } = req.body;
    const userId = req.user.id;

    if (!region || !startDate || !endDate || !type) {
      return res.status(400).json({ error: "–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    let user = await db.one("SELECT google_access_token, google_refresh_token FROM users WHERE id = $1", [userId]);
    let accessToken = user.google_access_token;

    // üîÑ –ï—Å–ª–∏ Access Token –ø—É—Å—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ refresh_token
    if (!accessToken) {
      console.log("üîÑ Access Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
      accessToken = await refreshAccessToken(user);

      if (!accessToken) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Access Token. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥.");
        return res.status(401).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Access Token. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥." });
      }

      console.log("‚úÖ –ù–æ–≤—ã–π Access Token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    }


    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–∑–æ–≤–∞ GEE
    const command = `earthengine run src/scripts/fetchData.js '${JSON.stringify(region)}' ${startDate} ${endDate} ${type}`;

    exec(command, async (error, stdout, stderr) => {
      if (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GEE: ${stderr}`);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" });
      }

      const geeData = stdout.trim();
      console.log("GEE Output:", geeData);

      const result = await db.one(
        "INSERT INTO gee_data (user_id, type, start_date, end_date, data) VALUES ($1, $2, $3, $4, $5) RETURNING *",
        [userId, type, startDate, endDate, geeData]
      );

      res.json(result);
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞" });
  }
});

/**
 * @swagger
 * /api/gee/data/{id}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö GEE
 *     tags: [GEE]
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID –¥–∞–Ω–Ω—ã—Ö
 *     responses:
 *       200:
 *         description: –î–∞–Ω–Ω—ã–µ GEE
 */
router.get("/data/:id", authMiddleware, async (req, res) => {
  try {
    const data = await db.oneOrNone("SELECT * FROM gee_data WHERE id = $1 AND user_id = $2", [
      req.params.id,
      req.user.id,
    ]);

    if (!data) {
      return res.status(404).json({ error: "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    res.json(data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

module.exports = router;
