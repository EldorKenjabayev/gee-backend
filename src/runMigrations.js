const fs = require("fs");
const path = require("path");
const db = require("./config/db");

const migrationsPath = path.join(__dirname, "migrations"); // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å

async function runMigrations() {
  console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...");

  // üõ† –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É migrations, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(migrationsPath)) {
    fs.mkdirSync(migrationsPath, { recursive: true });
  }

  // üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É migrations
  await db.none(`
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      filename TEXT NOT NULL UNIQUE,
      applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
  const migrationFiles = fs.readdirSync(migrationsPath).filter(f => f.endsWith(".sql"));
  if (migrationFiles.length === 0) {
    console.log("‚ö† –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...");
    return;
  }

  // üõ† –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
  const appliedMigrations = await db.manyOrNone("SELECT filename FROM migrations");
  const appliedFiles = appliedMigrations.map(m => m.filename);

  let applied = 0;
  for (const file of migrationFiles) {
    if (!appliedFiles.includes(file)) {
      const filePath = path.join(migrationsPath, file);
      const sql = fs.readFileSync(filePath, "utf8");

      console.log(`üìå –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${file}`);
      await db.none(sql);
      await db.none("INSERT INTO migrations (filename) VALUES ($1)", [file]);
      applied++;
    }
  }

  if (applied > 0) {
    console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${applied} –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π.`);
  } else {
    console.log("üëå –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.");
  }
}

module.exports = runMigrations;
