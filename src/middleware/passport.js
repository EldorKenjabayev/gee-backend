const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const db = require("../config/db");
const { OAuth2Client } = require("google-auth-library");

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID, process.env.GOOGLE_CLIENT_SECRET);

async function getAccessTokenFromRefreshToken(refreshToken) {
  try {
    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º Access Token —á–µ—Ä–µ–∑ Refresh Token...");
    const { tokens } = await client.refreshToken(refreshToken);
    console.log("‚úÖ –ù–æ–≤—ã–π Access Token:", tokens.access_token);
    return tokens.access_token;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Access Token —á–µ—Ä–µ–∑ Refresh Token:", error.message);
    return null;
  }
}

passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: process.env.GOOGLE_CALLBACK_URL,
      accessType: "offline",
      prompt: "consent",
      scope: [
        "email",  // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç—Å—è email
        "profile",
        "openid",  // ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è ID-—Ç–æ–∫–µ–Ω–∞
        "https://www.googleapis.com/auth/userinfo.email",  // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/devstorage.read_only",
        "https://www.googleapis.com/auth/earthengine.readonly",
      ],
    },
    async (req, accessToken, refreshToken, profile, done) => {
      console.log("üî• Google OAuth Response:");
      console.log("Access Token:", accessToken);
      console.log("Refresh Token (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏):", refreshToken);

      try {
        const email = profile.emails?.[0]?.value;
        const google_id = profile.id;

        if (!email) {
          return done(null, false, { message: "Google –Ω–µ –≤–µ—Ä–Ω—É–ª email" });
        }

        // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É —Å JSON –≤ refreshToken
        let refreshTokenString =
          typeof refreshToken === "string"
            ? refreshToken
            : refreshToken?.access_token || null;

        // –ï—Å–ª–∏ refresh_token –Ω–µ –ø—Ä–∏—à–µ–ª, –Ω–æ –µ—Å—Ç—å –≤ –ë–î ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        // ‚úÖ –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥–∏
        if (!refreshTokenString) {
          console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π refresh_token –∏–∑ –ë–î...");
          const userFromDB = await db.oneOrNone("SELECT google_refresh_token FROM users WHERE google_id = $1", [google_id]);
          refreshTokenString = userFromDB?.google_refresh_token || null;
        }

        console.log("üîç –ò—Ç–æ–≥–æ–≤—ã–π refresh_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", refreshTokenString ? "–ù–∞–π–¥–µ–Ω" : "–ù–µ—Ç refresh_token!");



        // –ï—Å–ª–∏ –Ω–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ refreshToken
        if (!accessToken && refreshTokenString) {
          console.log("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å Access Token —á–µ—Ä–µ–∑ Refresh Token...");
          accessToken = await getAccessTokenFromRefreshToken(refreshTokenString);
          console.log("‚úÖ –ù–æ–≤—ã–π Access Token —á–µ—Ä–µ–∑ Refresh Token:", accessToken);
        }

        if (!accessToken) {
          return done(null, false, { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Access Token" });
        }

        let user = await db.oneOrNone("SELECT * FROM users WHERE google_id = $1", [google_id]);

        if (!user) {
          user = await db.one(
            "INSERT INTO users (email, google_id, google_access_token, google_refresh_token) VALUES ($1, $2, $3, $4) RETURNING *",
            [email, google_id, accessToken, refreshTokenString]
          );
        } else {
          await db.none(
            "UPDATE users SET google_access_token = $1, google_refresh_token = COALESCE($2, google_refresh_token) WHERE google_id = $3",
            [accessToken, refreshTokenString, google_id]
          );
        }

        return done(null, user);
      } catch (error) {
        return done(error, false);
      }
    }
  )
);

module.exports = passport;
