const { OAuth2Client } = require("google-auth-library");
const axios = require("axios");
const db = require("../config/db");
const redis = require("../config/redis");

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

async function authMiddleware(req, res, next) {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });

    // 1Ô∏è‚É£ Redis'ni tekshirish
    const cachedUser = await redis.get(`token:${token}`);
    if (cachedUser) {
      req.user = JSON.parse(cachedUser);
      return next();
    }

    let user;

    // 2Ô∏è‚É£ Google Access Token bo‚Äòlsa, uni Google UserInfo API orqali tekshiramiz
    if (token.startsWith("ya29.")) {
      console.log("üîç Google Access Token aniqlangan!");
      
      // ‚úÖ Google UserInfo API orqali foydalanuvchini tekshirish
      const { data } = await axios.get("https://www.googleapis.com/oauth2/v1/userinfo", {
        headers: { Authorization: `Bearer ${token}` },
      });

      user = await db.oneOrNone("SELECT * FROM users WHERE email = $1", [data.email]);

      if (!user) return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    } else {
      return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞" });
    }

    // 3Ô∏è‚É£ Redis'ga cache qilish
    await redis.setex(`token:${token}`, 3600, JSON.stringify(user));

    req.user = user;
    next();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
    res.status(401).json({ error: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
}

module.exports = authMiddleware;
