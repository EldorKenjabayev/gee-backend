const jwt = require("jsonwebtoken");
const axios = require("axios");
const db = require("../config/db");
const redis = require("../config/redis");
const { OAuth2Client } = require("google-auth-library");

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

async function authMiddleware(req, res, next) {
  try {
    // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer ...
    const bearer = req.headers.authorization;
    if (!bearer) {
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
    }

    const token = bearer.split(" ")[1];
    if (!token) {
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
    }

    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (Redis)
    const cachedUser = await redis.get(`token:${token}`);
    if (cachedUser) {
      req.user = JSON.parse(cachedUser);
      return next();
    }

    let user;
    // 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    if (token.startsWith("ya29.")) {
      // === Google Access Token ===
      console.log("üîç Google Access Token!");
      const { data } = await axios.get("https://www.googleapis.com/oauth2/v1/userinfo", {
        headers: { Authorization: `Bearer ${token}` },
      });
      // –ò—â–µ–º –≤ –ë–î
      user = await db.oneOrNone("SELECT * FROM users WHERE email = $1", [data.email]);
      if (!user) {
        return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
    } else {
      // === –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —ç—Ç–æ JWT ===
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT!");
      const payload = jwt.verify(token, process.env.JWT_SECRET);
      // payload = { email, google_id, iat, exp }
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º, –∏—â–µ–º –ø–æ google_id
      user = await db.oneOrNone("SELECT * FROM users WHERE google_id = $1", [payload.google_id]);
      if (!user) {
        return res.status(401).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ JWT" });
      }
    }
    //wdeiiiidewn
    // 3) –ö—ç—à–∏—Ä—É–µ–º –≤ Redis –Ω–∞ —á–∞—Å (3600 —Å–µ–∫)
    await redis.setex(`token:${token}`, 3600, JSON.stringify(user));

    req.user = user;
    next();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
    return res.status(401).json({ error: "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
}

module.exports = authMiddleware;
