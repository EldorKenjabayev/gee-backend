const { OAuth2Client } = require("google-auth-library");
const db = require("../config/db");

const client = new OAuth2Client(
  process.env.GOOGLE_CLIENT_ID,
  process.env.GOOGLE_CLIENT_SECRET
);

async function refreshAccessToken(user) {
  try {
    if (!user.google_refresh_token) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç refresh token, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥ –≤ Google!");
      return null;
    }

    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º Access Token...");
    const { tokens } = await client.getToken(user.google_refresh_token); // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!

    if (!tokens || !tokens.access_token) {
      console.error("‚ùå –û—à–∏–±–∫–∞: Google –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π Access Token!");
      return null;
    }

    console.log("‚úÖ –ù–æ–≤—ã–π Access Token:", tokens.access_token);

    await db.none("UPDATE users SET google_access_token = $1 WHERE id = $2", [
      tokens.access_token,
      user.id,
    ]);

    return tokens.access_token;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Access Token:", error.message);
    if (error.message.includes("invalid_grant")) {
      console.error("‚ùå Refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Ö–æ–¥ –≤ Google.");
      return null;
    }
    return null;
  }
}

module.exports = { refreshAccessToken };
