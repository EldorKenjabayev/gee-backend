const fs = require("fs");
const path = require("path");
const db = require("./config/db");

async function rollbackLastMigration() {
  console.log("üîÑ –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏...");
  const lastMigration = await db.oneOrNone("SELECT filename FROM migrations ORDER BY applied_at DESC LIMIT 1");

  if (!lastMigration) {
    console.log("‚ùå –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞.");
    return;
  }

  const filePath = path.join(__dirname, "migrations", lastMigration.filename);
  const sql = fs.readFileSync(filePath, "utf8");

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è –æ—Ç–∫–∞—Ç–∞
  const rollbackSQL = sql.replace(/CREATE TABLE (.+?) \(/g, "DROP TABLE IF EXISTS $1");

  try {
    await db.none(rollbackSQL);
    await db.none("DELETE FROM migrations WHERE filename = $1", [lastMigration.filename]);
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—Ç–∞–Ω–∞!");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:", err);
  }
}

rollbackLastMigration();
